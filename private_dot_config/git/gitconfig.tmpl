[user]
    email = aaronpham0103@gmail.com
    name = Aaron Pham

[submodule]
    recurse = true

{{- if "$(git lfs &>/dev/null)" }}
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
{{- end }}

[alias]
    # quick commit
    ci = commit

    # update current index with keeping the files minimal
    skip = update-index --skip-worktree
    noskip = update-index --no-skip-worktree

    # get branch
    br = branch -vv

    # Long log
    l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lgs = log --oneline --abbrev-commit --all --graph --decorate --color
    lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

    # reset config
    nvm = reset --soft HEAD~1

    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View the current working tree status using the short format.
    s = status -s
    st = status -sb
    si = status --ignored

    # Show the diff between the latest commit and the current state.
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules.
    pre = pull --recurse-submodules
    p = pull
    pp = "!f() { git fetch \"$1\" \"$2\" && git pull \"$1\" \"$2\" && git remote prune \"$1\"; }; f"
    pa = pull --all --signoff --gpg-sign

    # Clone a repository including all submodules.
    cre = clone --recursive
    c = clone

    # Commit all changes.
    ca = !git add -A && git commit -S -sav
    cm = commit -S -sav

    # Switch to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch --all
    remotes = remote --verbose
    reprune = remote prune

    # List aliases.
    aliases = config --get-regexp alias

    # quick push 
    pushall = "!p() { git add . && git commit -S -sm \"$1\" && git push; }; p"

    # Amend the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit.
    credit = "!f() { git commit -S -s --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits.
    reb = "!r() { git rebase -i --signoff HEAD~$1; }; r"
    ra = rebase --abort
	rc = rebase --continue --signoff
	ri = rebase --interactive --signoff

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email

[pull]
    rebase = false

[core]
    {{- if eq .chezmoi.os "darwin" }}
    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false
    {{- end }}
    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true
    {{- if eq (env "EDITOR") "nvim" }}
    editor = nvim
    {{- else }}
    editor = vim
    {{- end }}

[color]
    ui = auto

[pager]
	branch = false
	grep = false

[push]
	default = current

[rebase]
	autosquash = true
	autostash = true

[init]
    defaultBranch = main
