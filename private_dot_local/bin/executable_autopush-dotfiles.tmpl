#!/usr/bin/env bash

set -euo pipefail

# setup directory
GIT_CONFIG_ROOT=$(dirname "$(git config --global --get include.path)")

# setup defaults message for cron tasks
DEFAULT_MESSAGE="chores"
DEFAULT_PS="cron"
CURRTIME=$(date +%s)

# setup message files
MSG_FILE="$GIT_CONFIG_ROOT/dot-commit-msg"
BACKUP_DIR="/mnt/Centralized/documents/dotfiles"
GITREPO="git@github.com:$USER/dotfiles.git"

# get datetime
COMMITTIME=$(date +'%m/%d %H:%M%p')
TASKNAME=
MESSAGE=
INTERACTIVE=

# another way to check for cron
CRON=$(pstree -s $$ | grep -q cron && echo true || echo false)

check_interactive() {
  # check for /dev/tty instead
  if [ -t 1 ]; then
    # this is interactive
    INTERACTIVE=1
  else
    INTERACTIVE=0
  fi
}

check_cron() {
  if $CRON;then
    return 1
  else
    return 0
  fi
}

function pprint() {
  if [[ $INTERACTIVE == 0 ]]; then
    echo -e "$*"
  else
    # yellow
    echo -e "\e[1;33m$*\e[m"
  fi
}

# check if message files is recently modified, default time difference: 20h
# https://stackoverflow.com/a/28341234/8643197
check_if_modified(){

  file=$1

  [[ ! -f $file ]] && touch "$file"
  STALE=$(expr 20 \* 60 \* 60 )
  if [[ $(uname) == "Linux" ]]; then
    FILETIME=$(stat "$file" -c %Y)
  elif [[ $(uname) == "Darwin" ]]; then
    FILETIME=$(stat -t %s -f %m $file)
  fi

  if [ $(expr "$CURRTIME" - "$FILETIME" ) -lt "$STALE" ]; then
    return 0
  else
    return 1
  fi
}

define_message_body(){
  # this will handles while interactive, check predefined message, or just use chores

  if check_if_modified $MSG_FILE; then
    pprint "Using predefined message, stored at $MSG_FILE"
    MESSAGE=$(cat "$MSG_FILE")
    TASKNAME="$DEFAULT_PS"
  # TODO: this is broken
  elif [[ $INTERACTIVE == 1 ]]; then
    read -ep "Define message body: " MESSAGE
    TASKNAME="$USER"
  else
    pprint "Running by cron"
    MESSAGE="$DEFAULT_MESSAGE"
    TASKNAME="$DEFAULT_PS"
  fi
}

# https://stackoverflow.com/a/36332260/8643197
# TODO: should only run as cronjob instead of scripts
backup_dotfiles() {
  BACKUPDIR="$1"
  [[ -d "$BACKUPDIR" ]] || git clone "$GITREPO" "$BACKUPDIR"
  cd "$BACKUPDIR" && git fetch && git pull --recurse-submodules
}

autopush_dots() {

  # this will check whether task is running by cron or user
  check_interactive

  {{ if not (eq .hostname "mbp16") }}
  # backup
  pprint "Backup dotfiles to $BACKUP_DIR..."
  pprint "Repository: $GITREPO"
  backup_dotfiles $BACKUP_DIR
  {{ end }}

  pprint "\nDumping installed packages to files..."
  {{- if stat "/etc/arch-release" }}
  # Check for new packages, and add it to both .local file
  paru -Qqen >| {{ .chezmoi.sourceDir }}/bootstrap/configs/Pacfile.local
  paru -Qqem >| {{ .chezmoi.sourceDir }}/bootstrap/configs/Aurfile.local
  pprint "Done."
  {{- else if eq .chezmoi.os "darwin" }}
  brew bundle dump -f --file={{ .chezmoi.sourceDir }}/bootstrap/configs/Brewfile
  {{- end }}

  # Check if upstream, else not pull
  if [ $(git rev-parse @) == $(git merge-base @ ${1:-'@{u}'}) ]; then
    git pull --recurse-submodules
  fi

  # define message block here
  pprint "\nGet commit message..."
  define_message_body && cd "$(chezmoi source-path)"
  COMMITMSG="[$TASKNAME] $COMMITTIME: $MESSAGE"
  pprint "Commit message: $COMMITMSG"

  # scrot -o bootstrap/screenshots/desktop.png

  # execute scripts
  pprint "\nPushing to remote directory..."
  git add -f -v . && git commit -S -sam "$COMMITMSG" && git push --all
}

autopush_dots "$@"

# vim: set ft=zsh.gohtmltmpl ts=4 sw=4 tw=0 et:
